#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

// const { Server } = ;
const server = http.createServer(app);

const io = require("socket.io")(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"],
    credentials: true,
  },
});

io.on("connection", (socket) => {
  console.log("a user connected", socket.id);

  const users = [];
  for (let [id, socket] of io.of("/").sockets) {
    users.push({
      userID: id,
      userEmail: socket.userEmail,
    });
  }
  console.log(" Users Serveur side", users);
  socket.emit("users", users);

  socket.broadcast.emit("user connected", {
    userID: socket.id,
    userEmail: socket.userEmail,
  });

  // socket.join("test room");

  socket.on("disconnet", () => {
    console.log("User disconnected", socket.id);
  });
});

io.use((socket, next) => {
  const userEmail = socket.handshake.auth.email;
  if (!userEmail) {
    return next(new Error("invalid Email !!"));
  }
  socket.userEmail = userEmail;
  next();
});

io.on("connect_error", (err) => {
  console.log(`connect_error due to ${err.message}`);
});

// const io = require("socket.io")("http://localhost:3000");
// io.on("connect", (socket) => {
//   console.log(socket.id);
// });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
